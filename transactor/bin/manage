#!env python
# -*- mode: Python; fill-column: 79; comment-column: 50; -*-
from __future__ import print_function

import atexit
import functools
import json
import logging
import os
import re

from datetime import datetime
import sys

from botocore.exceptions import ClientError, WaiterError
from botocore.exceptions import ProfileNotFound
import boto3
import click
import requests
import requests.exceptions

import pprint


DEFAULT_CF_STACK_NAME = 'WBTransactor'

DEFAULT_CF_TEMPLATE_PATH = os.path.join(os.getcwd(),
                                        'config',
                                        'wb-cf-ensured.json')

manage_cmd_group = functools.partial(click.group, context_settings={
    'help_option_names': ['-h', '--help']
})


logger = logging.getLogger('boto3')


class URLParamType(click.ParamType):

    name = 'url'

    def convert(self, value, param, ctx):
        try:
            response = requests.get(value)
        except requests.exceptions.MissingSchema:
            self.fail(f'Invalid URL: {value!r}', param, ctx)
        else:
            if response.status_code != 200:
                self.fail(f'URL {value!r} does not resolve', param, ctx)
        return value

URL = URLParamType()

def option(*args, **kw):
    """Factory function for click.option that makes help text more useful.

    When emitted, the help text will display any default passed to the option.

    :returns: Same object as `click.option`.
    """
    default = kw.get('default')
    if default is not None:
        s_default = str(default)
    else:
        s_default = ''
    help_text = kw.get('help', '')
    if all((s_default, help_text, s_default not in help_text)):
        kw['help'] = help_text + ' Default: ' + s_default
    return click.option(*args, **kw)


log_level_option = functools.partial(
    option,
    '-l',
    '--log-level',
    default='WARNING',
    type=click.Choice(choices=('DEBUG', 'INFO', 'WARNING', 'ERROR')),
    help='Logging level.')


def validate_desired_capacity(ctx, param, value):
    """Validates the auto-scaling desired capacity value."""
    if re.match(r'[12]', value) is None:
        raise ValueError('DesiredCapacity Must be 1 or 2')
    return value


desired_capacity_option = functools.partial(
    option, '--desired-capacity',
    default='1',
    type=str,
    callback=validate_desired_capacity,
    help='The number of EC2 instances desired to be in service.')


template_path_option = functools.partial(
    option,
    '--cf-template-path',
    default=DEFAULT_CF_TEMPLATE_PATH,
    type=click.Path(exists=True),
    help='Path to CloudFormation template file.')


def command_result_reporter(func):
    """Decorator that prints the result of commands.

    Results are printed dependant on the truthy-ness of `verbose` flag
    supplied to the top-level command.
    """

    @functools.wraps(func)
    def reporter(ctx, *args, **kw):
        result = func(ctx, *args, **kw)
        if result and ctx.verbose:
            print(result)

    return reporter


def make_session(profile_name):
    """Create an AWS boto3 session."""
    try:
        sess = boto3.Session(profile_name=profile_name)
    except ProfileNotFound as pnf:
        logger.error(str(pnf))
        click.get_current_context().abort()
    return sess


class CommandContext:

    wb_dp_license_key_path = '/tmp/wp-dp-license.key'

    def __init__(self, profile,
                 aws_username=None,
                 verbose=True):
        self._aws_username = aws_username
        self.profile = profile
        if not profile:
            click.echo('AWS profile is undefined.'
                       ' Define AWS_PROFILE/AWS_DEFAULT_PROFILE env variabable or use the --profile (base script) argument.',
                       color='red')
            raise click.Abort()
        self.cf_stack_name = None
        self.session = make_session(self.profile)
        self.verbose = verbose
        self.params = None

    @classmethod
    def read_settings(cls, settings_path):
        with open(settings_path) as fp:
            return json.load(fp)
        
    @property
    def aws_username(self):
        if self._aws_username is None:
            #Define IAM user name based on current session
            try:
                #pylint: disable-msg=E1101
                self._aws_username = self.client('iam').get_user()['User']['UserName']
            except ClientError:
                logger.error('Failed to retrieve IAM user-name. Specify user-name using the --aws-username argument.')
                click.get_current_context().abort()
            
        return self._aws_username

    def client(self, name):
        """
        Return a boto3, user-authenticated client to a named AWS service
        """
        return self.session.client(name)

    def resource(self, name):
        return self.session.resource(name)

    @property
    def cf_resource(self):
        return self.resource('cloudformation')

    @property
    def cf_client(self):
        return self.client('cloudformation')

    def read_file(self, path):
        with open(path) as fp:
            return fp.read()

    def fetch_datomic_pro_license_key_text(self):
        s3 = self.session.resource('s3')
        bucket = s3.Bucket('wormbase')
        bucket.download_file('datomic-pro/license.key',
                             self.wb_dp_license_key_path)
        return self.read_file(self.wb_dp_license_key_path).rstrip()


pass_command_context = click.make_pass_decorator(CommandContext)


@manage_cmd_group()
@option('--profile',
        default=os.environ.get(
            'AWS_PROFILE', os.environ.get('AWS_DEFAULT_PROFILE', '')),
        help='AWS profile')
@option('--aws-username',
        default=None,
        help='AWS username. Same as profile if not specified.')
@option('--verbose/--quiet', default=True)
@log_level_option(default='INFO')
@click.pass_context
def manage(ctx,
           profile,
           aws_username,
           log_level,
           verbose):
    boto3.set_stream_logger(level=getattr(logging, log_level))
    ctx.obj = CommandContext(profile,
                             aws_username=aws_username,
                             verbose=verbose)
    ctx.profile_name = profile
    ctx.session = make_session(ctx.profile_name)

def _make_tags(ctx):
    return [dict(Key='CreatedBy', Value=ctx.aws_username),
            dict(Key='Name', Value=ctx.cf_stack_name),
            dict(Key='Status', Value='production'),
            dict(Key='Role', Value='datomic-transactor'),
            dict(Key='Description',
                 Value=('Instance for running a datomic transactor '
                        'created through CloudFormation'))]


def _parameter(name, value=None):
    """
    Returns a map representing a CF parameter
    """
    param = {'ParameterKey': name}
    if value:
        param['ParameterValue'] = value
    else:
        param['UsePreviousValue'] = True
    return param

def _propose_cf_changeset_cleanup(ctx, change_set_name, stack_name):
    """
    Propose CloudFormation change-set cleanup (removal)
    through standard OUT/IN
    """

    cleanup = input('Cleanup change set? [Y/n]: ')
    cleanup = cleanup.lower()

    if cleanup in ('y', 'yes', ''):
        ctx.cf_client.delete_change_set(
            ChangeSetName=change_set_name,
            StackName=stack_name
        )


#Create subcommand
@manage.command()
@click.argument('settings_path')
@click.argument('cf_stack_name')
@click.argument('ddb_table_name')
@click.argument('datomic_version')
@option('--datomic-transactor-deps-script',
        default=None,
        type=URL,
        help=('Optional custom script to install dependencies for a trasactor.'))
@option('--datomic-ext-classpath-script',
        default=None,
        type=URL,
        help=('Optional arguments to custom script to download dependencies '
              'and build the classpath string for DATOMIC_EXT_CLASSPATH, if provided.'))
@desired_capacity_option()
@template_path_option()
@pass_command_context
@command_result_reporter
def create(ctx,
           settings_path,
           cf_stack_name,
           ddb_table_name,
           datomic_version,
           datomic_transactor_deps_script,
           datomic_ext_classpath_script,
           desired_capacity,
           cf_template_path):
    """Create a new CloudFormation stack for Datomic tranactor(s).
    """
    #Define arguments
    ctx.settings_path = settings_path
    ctx.params = ctx.read_settings(settings_path)
    ctx.cf_stack_name = cf_stack_name

    wb_dp_license_key_text = ctx.fetch_datomic_pro_license_key_text()
    params = [
        _parameter('DDBTableName', ddb_table_name),
        _parameter('DatomicLicenseKey', wb_dp_license_key_text),
        _parameter('DatomicVersion', datomic_version),
        _parameter('AutoScalingDesiredCapacity', desired_capacity),
    ]
    if datomic_ext_classpath_script:
        params += [_parameter('DatomicExtClasspathScript', datomic_ext_classpath_script)]
    if datomic_transactor_deps_script:
        params += [_parameter('DatomicTransactorDepsScript', datomic_transactor_deps_script)]
    params.extend(_parameter(k, v)
                  for (k, v) in  ctx.params.items())
    kw = dict(StackName=ctx.cf_stack_name,
              TemplateBody=ctx.read_file(cf_template_path),
              Parameters=params,
              Tags=_make_tags(ctx))
    return ctx.cf_resource.create_stack(**kw)


#Update subcommand
@manage.command()
@click.argument('settings_path')
@click.argument('cf_stack_name')
@click.argument('ddb_table_name')
@option('--datomic-version',
        default=None,
        type=str,
        help='If not specified, use existing version')
@option('--datomic-transactor-deps-script',
        default=None,
        type=URL,
        help=('Optional custom script to install dependencies for a transactor.'))
@option('--datomic-ext-classpath-script',
        default=None,
        type=URL,
        help=('Optional arguments to custom script to download dependencies '
              'and build the classpath string for DATOMIC_EXT_CLASSPATH, if provided.'))
@option('--datomic-transactor-startup-script',
        default=None,
        type=URL,
        help=('Optional URL to custom datomic transactor startup script. If undefined, defaults to CF template default.'))
@option('--descr',
        default=None,
        type=str,
        required=True,
        help=('Small string describing why updates are to be made.'))
@desired_capacity_option()
@template_path_option(default=None)
@pass_command_context
@command_result_reporter
def update(ctx,
           settings_path,
           cf_stack_name,
           ddb_table_name,
           datomic_version,
           datomic_transactor_deps_script,
           datomic_ext_classpath_script,
           datomic_transactor_startup_script,
           descr,
           desired_capacity,
           cf_template_path):
    """
    Update the CloudFormation configuration of the Datomic transactor(s).
    Creates a change set and returns it for human verification,
    before applying it to the live CF stack.
    """
    #Define arguments
    ctx.settings_path = settings_path
    ctx.params = ctx.read_settings(settings_path)
    ctx.cf_stack_name = cf_stack_name

    params = [
        _parameter('DDBTableName', ddb_table_name),
        _parameter('DatomicLicenseKey'),
        _parameter('DatomicVersion', datomic_version),
        _parameter('AutoScalingDesiredCapacity', desired_capacity),
    ]
    if datomic_transactor_deps_script:
        params += [_parameter('DatomicTransactorDepsScript', datomic_transactor_deps_script)]
    if datomic_ext_classpath_script:
        params += [_parameter('DatomicExtClasspathScript', datomic_ext_classpath_script)]
    if datomic_transactor_startup_script:
        params += [_parameter('DatomicTransactorStartupScript', datomic_transactor_startup_script)]
    params.extend(_parameter(k, v)
                  for (k, v) in  ctx.params.items())
    kw = dict(StackName=ctx.cf_stack_name,
              Tags=_make_tags(ctx),
              Parameters=params)
    if cf_template_path is None:
        kw['UsePreviousTemplate'] = True
    else:
        kw['TemplateBody'] = ctx.read_file(cf_template_path)

    kw['ChangeSetName'] = "cli-manage-" + datetime.now().strftime("%Y%m%d-%H%M%S")
    kw['Description'] = descr

    ctx.cf_client.create_change_set(**kw)

    #Wait for change set to become available
    waiter = ctx.cf_client.get_waiter('change_set_create_complete')
    try :
        waiter.wait(
            ChangeSetName=kw['ChangeSetName'],
            StackName=ctx.cf_stack_name
        )
    except WaiterError:
        change_set = ctx.cf_client.describe_change_set(
            ChangeSetName=kw['ChangeSetName'],
            StackName=ctx.cf_stack_name
        )

        if change_set['Status'] == "FAILED":
            print("Creating stack change set failed: "+change_set['StatusReason'], file=sys.stderr)

            _propose_cf_changeset_cleanup(ctx, kw['ChangeSetName'], ctx.cf_stack_name)

            sys.exit(1)
        else:
            print("Unexpected error waiting for Change Set to return.", file=sys.stderr)
            raise

    change_set = ctx.cf_client.describe_change_set(
        ChangeSetName=kw['ChangeSetName'],
        StackName=ctx.cf_stack_name
    )

    print("\nThe following change set will be applied to CF stack '"+ctx.cf_stack_name+"':\n")
    print("Input params:\n")
    print(pprint.pprint(change_set['Parameters']))
    print("Changes:\n")
    print(pprint.pprint(change_set['Changes']))

    apply_change = None
    while apply_change not in ('n', 'no', 'y', 'yes', ''):
        apply_change = input('Execute change set? [Y/n]: ')
        apply_change = apply_change.lower()

    return_msg = None
    if apply_change in ('n', 'no'):
        #Propose change set cleanup
        _propose_cf_changeset_cleanup(ctx, kw['ChangeSetName'], ctx.cf_stack_name)

        return_msg = "Stack update aborted (user input)."

    else:
        #Apply the change set
        ctx.cf_client.execute_change_set(
            ChangeSetName=kw['ChangeSetName'],
            StackName=ctx.cf_stack_name
        )

        return_msg = "Successfully updated stack '"+ctx.cf_stack_name+"'."

    return return_msg


#Delete subcommand
@manage.command()
@click.argument('cf_stack_name')
@pass_command_context
@command_result_reporter
def delete(ctx, cf_stack_name):
    """Delete the existing CloudFormation stack for the Datomic transactor(s).
    """
    return ctx.cf_client.delete_stack(StackName=cf_stack_name)


#Status subcommand
@manage.command()
@click.argument('cf_stack_name')
@pass_command_context
def status(ctx, cf_stack_name):
    """Report the status of the current transactor stack."""

    stacks = ctx.cf_resource.stacks.filter(StackName=cf_stack_name)
    try:
        transactors_stack = next(iter(stacks), None)
    except ClientError:
        print('No transactor stack with name', repr(cf_stack_name))
    else:
        print(transactors_stack.stack_status)
        print('Event log:')
        for se in transactors_stack.events.all():
            ts = se.timestamp.replace(microsecond=0)
            print(ts.isoformat(' '), se.resource_status)


#validate-template subcommand
@manage.command('validate-template')
@template_path_option()
@pass_command_context
@command_result_reporter
def validate_template(ctx, cf_template_path):
    """Validate the CloudFormation JSON template."""
    result = ctx.cf_client.validate_template(
        TemplateBody=ctx.read_file(cf_template_path))
    return result


@atexit.register
def clean_up():
    try:
        os.remove(CommandContext.wb_dp_license_key_path)
    except IOError:
        pass


if __name__ == '__main__':
    manage()
